
from app.models.user import User, UserRole
from fastapi import HTTPException, status
import boto3
import json
from sqlalchemy.ext.asyncio import AsyncSession
from app.schemas.request.landing import LandingRequest
from app.models.landing import ExternalLinks, Faqs, UserGuide, VideosTutorials, FileDownloads
from app.schemas.response.landing import LandingGetItemResponse, LandingGetResponse
from sqlalchemy.future import select
from app.schemas.request.landing import FaqsCreationRequest, FaqsUpdationRequest



async def create_landing_content(
        identifier: int,
        landing_request: LandingRequest,
        db: AsyncSession, 
    ):
    if identifier == 0: # if identifer 0 means User guide 
        create_records = UserGuide(
            title = landing_request.title,
            link = landing_request.link,
            description = landing_request.description
        )
    elif identifier == 1: #if identifier 1 means external links
        create_records = ExternalLinks(
            title = landing_request.title,
            link = landing_request.link,
            description = landing_request.description
        )
    elif identifier == 2: #if identifier 2 means file download
        create_records = FileDownloads(
            title = landing_request.title,
            link = landing_request.link,
            description = landing_request.description
        )
    elif identifier == 3: #if identifier 3 means video tutorials
        create_records = VideosTutorials(
            title = landing_request.title,
            link = landing_request.link,
            description = landing_request.description
        )

    db.add(create_records)
    # Commit the transaction
    await db.commit()
    # Refresh to load any new data (like autogenerated id)
    await db.refresh(create_records)
    return create_records

async def update_landing_content(
        identifier,
        update_request,
        db, 
    ):
    model_mapping = {
        0: UserGuide,
        1: ExternalLinks,
        2: FileDownloads,
        3: VideosTutorials
    }
    model = model_mapping.get(identifier)
    if model is None:
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail="Invalid identifier provided"
        )
    query = await db.execute(select(model).where(model.id == update_request.id))
    record = query.scalars().first()

    if not record:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail="Record not found"
        )
    # Update only provided fields
    if update_request.title is not None:
        record.title = update_request.title
    if update_request.link is not None:
        record.link = update_request.link
    if update_request.description is not None:
        record.description = update_request.description
    await db.commit()
    await db.refresh(record)
    return record

async def get_landing_content(
        identifier: int,
        db: AsyncSession, 
    ):
    if identifier == 0:  # User guide
        query = await db.execute(select(UserGuide))
    elif identifier == 1:  # External links
        query = await db.execute(select(ExternalLinks))
    elif identifier == 2:  # File downloads
        query = await db.execute(select(FileDownloads))
    elif identifier == 3:  # Video tutorials
        query = await db.execute(select(VideosTutorials))
    else:
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail="Invalid identifier provided"
        )

    records = query.scalars().all()
    database_records = []
    for record in records:
        response_item = LandingGetItemResponse(
            title=record.title,
            description=record.description,
            link=record.link,
            id=record.id
        )
        database_records.append(response_item)
    return database_records

async def delete_landing_content(
        identifier,
        id,
        db, 
    ):
    model_mapping = {
        0: UserGuide,
        1: ExternalLinks,
        2: FileDownloads,
        3: VideosTutorials
    }

    model = model_mapping.get(identifier)
    if model is None:
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail="Invalid identifier provided"
        )
    # Fetch the existing record
    query = await db.execute(select(model).where(model.id == id.id))
    record = query.scalars().first()

    if not record:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail="Record not found"
        )
    # Delete the record
    await db.delete(record)
    await db.commit()

    return 





async def faqs_create_content(
        faqs_data:FaqsCreationRequest,
        db: AsyncSession, 
    ):
    faqs = Faqs(
        question = faqs_data.question,
        answer =  faqs_data.answer
    )
    db.add(faqs)
    # Commit the transaction
    await db.commit()
    # Refresh to load any new data (like autogenerated id)
    await db.refresh(faqs)
    return faqs

async def get_faqs_content(db: AsyncSession):
    result = await db.execute(select(Faqs))
    faqs_list = result.scalars().all()
    return faqs_list

async def faqs_update_content(
        update_request: FaqsUpdationRequest,
        db: AsyncSession, 
    ):
    result = await db.execute(select(Faqs).where(Faqs.id == update_request.id))
    existing_faq = result.scalars().first()

    if not existing_faq:
        raise HTTPException(status_code=404, detail="FAQ not found.")
    # Update the FAQ fields
    existing_faq.question = update_request.question
    existing_faq.answer = update_request.answer

    # Commit the changes
    await db.commit()
    await db.refresh(existing_faq)

    return existing_faq

async def faqs_delete_content(faq_id: int, db: AsyncSession):
    result = await db.execute(select(Faqs).where(Faqs.id == faq_id))
    existing_faq = result.scalars().first()

    if not existing_faq:
        raise HTTPException(status_code=404, detail="FAQ not found.")

    # Delete the FAQ
    await db.delete(existing_faq)
    await db.commit()

    return {"message": "FAQ deleted successfully"}


async def get_all_landing_items(db):
    content_types = {
        0: UserGuide,
        1: ExternalLinks,
        2: FileDownloads,
        3: VideosTutorials
    }
    responses = []
    
    for identifier, model in content_types.items():
        query = await db.execute(select(model))
        records = query.scalars().all()
        
        database_records = [
            LandingGetItemResponse(
                title=record.title,
                description=record.description,
                link=record.link,
                id=record.id
            )
            for record in records
        ]
        
        responses.append(LandingGetResponse(items=database_records, identifier=identifier))

    return responses